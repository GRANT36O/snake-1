
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;

import javax.swing.JPanel;

public class BoardPanel extends JPanel
{

	// number of columns on board
	public static final int COL_COUNT = 25;

	// rows on board
	public static final int ROW_COUNT = 25;

	// tile size
	public static final int TILE_SIZE = 20;

	// array of tiles that make up board
	private TileType[] tiles;
	
	private static final long serialVersionUID = 1L;
	// new board panel instance
	public BoardPanel(SnakeGame game)
	{
		this.tiles = new TileType[ROW_COUNT * COL_COUNT];

		setPreferredSize(new Dimension(COL_COUNT * TILE_SIZE, ROW_COUNT * TILE_SIZE));
		setBackground(Color.BLACK);
	}

	// clears all tiles
	public void clearBoard()
	{
		for (int i = 0; i < tiles.length; i++)
		{
			tiles[i] = null;
		}
	}

	// sets tile at desired point
	public void setTile(Point point, TileType type)
	{
		setTile(point.x, point.y, type);
	}

	// sets tile at desired coordinate
	public void setTile(int x, int y, TileType type)
	{
		tiles[y * ROW_COUNT + x] = type;
	}

	// gets tile at desired coordinate
	public TileType getTile(int x, int y)
	{
		return tiles[y * ROW_COUNT + x];
	}

	@Override
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);

		// loop for drawing tiles
		for (int x = 0; x < COL_COUNT; x++)
		{
			for (int y = 0; y < ROW_COUNT; y++)
			{
				TileType type = getTile(x, y);
				if (type != null)
				{
					drawTile(x * TILE_SIZE, y * TILE_SIZE, type, g);
				}
			}
		}

	}

	// Draws a tile onto the board.

	private void drawTile(int x, int y, TileType type, Graphics g)
	{

		switch (type)
		{

		// fruit
		case Fruit:
			g.setColor(Color.RED);
			g.fillOval(x + 2, y + 2, TILE_SIZE - 4, TILE_SIZE - 4);
			break;

		// snake body
		case SnakeBody:
			g.setColor(Color.GREEN);
			g.fillRect(x, y, TILE_SIZE, TILE_SIZE);
			break;

		// snake head
		case SnakeHead:
			// Fill the tile in with green.
			g.setColor(Color.GREEN);
			g.fillRect(x, y, TILE_SIZE, TILE_SIZE);
		}
	}

}
